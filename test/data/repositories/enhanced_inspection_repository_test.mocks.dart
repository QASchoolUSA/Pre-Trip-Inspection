// Mocks generated by Mockito 5.4.4 from annotations
// in pti_mobile_app/test/data/repositories/enhanced_inspection_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:dio/dio.dart' as _i8;
import 'package:hive_flutter/hive_flutter.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;
import 'package:pti_mobile_app/core/services/api_service.dart' as _i7;
import 'package:pti_mobile_app/core/services/sync_service.dart' as _i10;
import 'package:pti_mobile_app/data/datasources/database_service.dart' as _i5;
import 'package:pti_mobile_app/data/models/inspection_models.dart' as _i6;
import 'package:pti_mobile_app/data/models/sync_models.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBox_0<E> extends _i1.SmartFake implements _i2.Box<E> {
  _FakeBox_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_1<T1> extends _i1.SmartFake implements _i3.Future<T1> {
  _FakeFuture_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSyncBatch_2 extends _i1.SmartFake implements _i4.SyncBatch {
  _FakeSyncBatch_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSyncStats_3 extends _i1.SmartFake implements _i4.SyncStats {
  _FakeSyncStats_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i5.DatabaseService {
  MockDatabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Box<_i6.Inspection> get inspectionsBox => (super.noSuchMethod(
        Invocation.getter(#inspectionsBox),
        returnValue: _FakeBox_0<_i6.Inspection>(
          this,
          Invocation.getter(#inspectionsBox),
        ),
      ) as _i2.Box<_i6.Inspection>);

  @override
  _i2.Box<_i6.Vehicle> get vehiclesBox => (super.noSuchMethod(
        Invocation.getter(#vehiclesBox),
        returnValue: _FakeBox_0<_i6.Vehicle>(
          this,
          Invocation.getter(#vehiclesBox),
        ),
      ) as _i2.Box<_i6.Vehicle>);

  @override
  _i2.Box<_i6.User> get usersBox => (super.noSuchMethod(
        Invocation.getter(#usersBox),
        returnValue: _FakeBox_0<_i6.User>(
          this,
          Invocation.getter(#usersBox),
        ),
      ) as _i2.Box<_i6.User>);

  @override
  _i2.Box<dynamic> get settingsBox => (super.noSuchMethod(
        Invocation.getter(#settingsBox),
        returnValue: _FakeBox_0<dynamic>(
          this,
          Invocation.getter(#settingsBox),
        ),
      ) as _i2.Box<dynamic>);

  @override
  _i3.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> clearAllData() => (super.noSuchMethod(
        Invocation.method(
          #clearAllData,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<Map<String, int>> getDatabaseStats() => (super.noSuchMethod(
        Invocation.method(
          #getDatabaseStats,
          [],
        ),
        returnValue: _i3.Future<Map<String, int>>.value(<String, int>{}),
      ) as _i3.Future<Map<String, int>>);

  @override
  _i3.Future<void> compactDatabase() => (super.noSuchMethod(
        Invocation.method(
          #compactDatabase,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<Map<String, dynamic>> exportDatabase() => (super.noSuchMethod(
        Invocation.method(
          #exportDatabase,
          [],
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<void> importDatabase(Map<String, dynamic>? backup) =>
      (super.noSuchMethod(
        Invocation.method(
          #importDatabase,
          [backup],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [ApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiService extends _i1.Mock implements _i7.ApiService {
  MockApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<T> get<T>(
    String? path, {
    Map<String, dynamic>? queryParameters,
    _i8.Options? options,
    bool? requiresAuth = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
          {
            #queryParameters: queryParameters,
            #options: options,
            #requiresAuth: requiresAuth,
          },
        ),
        returnValue: _i9.ifNotNull(
              _i9.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #get,
                  [path],
                  {
                    #queryParameters: queryParameters,
                    #options: options,
                    #requiresAuth: requiresAuth,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #get,
                [path],
                {
                  #queryParameters: queryParameters,
                  #options: options,
                  #requiresAuth: requiresAuth,
                },
              ),
            ),
      ) as _i3.Future<T>);

  @override
  _i3.Future<T> post<T>(
    String? path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    _i8.Options? options,
    bool? requiresAuth = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #requiresAuth: requiresAuth,
          },
        ),
        returnValue: _i9.ifNotNull(
              _i9.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #post,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #requiresAuth: requiresAuth,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #post,
                [path],
                {
                  #data: data,
                  #queryParameters: queryParameters,
                  #options: options,
                  #requiresAuth: requiresAuth,
                },
              ),
            ),
      ) as _i3.Future<T>);

  @override
  _i3.Future<T> put<T>(
    String? path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    _i8.Options? options,
    bool? requiresAuth = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #requiresAuth: requiresAuth,
          },
        ),
        returnValue: _i9.ifNotNull(
              _i9.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #put,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #requiresAuth: requiresAuth,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #put,
                [path],
                {
                  #data: data,
                  #queryParameters: queryParameters,
                  #options: options,
                  #requiresAuth: requiresAuth,
                },
              ),
            ),
      ) as _i3.Future<T>);

  @override
  _i3.Future<T> delete<T>(
    String? path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    _i8.Options? options,
    bool? requiresAuth = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #requiresAuth: requiresAuth,
          },
        ),
        returnValue: _i9.ifNotNull(
              _i9.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #delete,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #requiresAuth: requiresAuth,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #delete,
                [path],
                {
                  #data: data,
                  #queryParameters: queryParameters,
                  #options: options,
                  #requiresAuth: requiresAuth,
                },
              ),
            ),
      ) as _i3.Future<T>);

  @override
  _i3.Future<T> uploadFile<T>(
    String? path,
    String? filePath, {
    String? fieldName = r'file',
    Map<String, dynamic>? data,
    _i8.ProgressCallback? onSendProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadFile,
          [
            path,
            filePath,
          ],
          {
            #fieldName: fieldName,
            #data: data,
            #onSendProgress: onSendProgress,
          },
        ),
        returnValue: _i9.ifNotNull(
              _i9.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #uploadFile,
                  [
                    path,
                    filePath,
                  ],
                  {
                    #fieldName: fieldName,
                    #data: data,
                    #onSendProgress: onSendProgress,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #uploadFile,
                [
                  path,
                  filePath,
                ],
                {
                  #fieldName: fieldName,
                  #data: data,
                  #onSendProgress: onSendProgress,
                },
              ),
            ),
      ) as _i3.Future<T>);

  @override
  _i3.Future<void> downloadFile(
    String? url,
    String? savePath, {
    _i8.ProgressCallback? onReceiveProgress,
    _i8.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadFile,
          [
            url,
            savePath,
          ],
          {
            #onReceiveProgress: onReceiveProgress,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [SyncService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSyncService extends _i1.Mock implements _i10.SyncService {
  MockSyncService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i4.SyncStats> get syncStatsStream => (super.noSuchMethod(
        Invocation.getter(#syncStatsStream),
        returnValue: _i3.Stream<_i4.SyncStats>.empty(),
      ) as _i3.Stream<_i4.SyncStats>);

  @override
  _i3.Stream<_i4.SyncBatch> get syncBatchStream => (super.noSuchMethod(
        Invocation.getter(#syncBatchStream),
        returnValue: _i3.Stream<_i4.SyncBatch>.empty(),
      ) as _i3.Stream<_i4.SyncBatch>);

  @override
  _i3.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void startPeriodicSync({Duration? interval = const Duration(minutes: 5)}) =>
      super.noSuchMethod(
        Invocation.method(
          #startPeriodicSync,
          [],
          {#interval: interval},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stopPeriodicSync() => super.noSuchMethod(
        Invocation.method(
          #stopPeriodicSync,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<_i4.SyncBatch> syncAll({bool? force = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #syncAll,
          [],
          {#force: force},
        ),
        returnValue: _i3.Future<_i4.SyncBatch>.value(_FakeSyncBatch_2(
          this,
          Invocation.method(
            #syncAll,
            [],
            {#force: force},
          ),
        )),
      ) as _i3.Future<_i4.SyncBatch>);

  @override
  _i3.Future<void> syncEntity(
    String? entityType,
    String? entityId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #syncEntity,
          [
            entityType,
            entityId,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> markForSync(
    String? entityType,
    String? entityId,
    _i4.SyncOperation? operation, {
    Map<String, dynamic>? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #markForSync,
          [
            entityType,
            entityId,
            operation,
          ],
          {#data: data},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i4.SyncStats> getSyncStats() => (super.noSuchMethod(
        Invocation.method(
          #getSyncStats,
          [],
        ),
        returnValue: _i3.Future<_i4.SyncStats>.value(_FakeSyncStats_3(
          this,
          Invocation.method(
            #getSyncStats,
            [],
          ),
        )),
      ) as _i3.Future<_i4.SyncStats>);

  @override
  _i3.Future<void> resolveConflict(
    String? conflictId,
    _i4.ConflictResolution? resolution, {
    Map<String, dynamic>? mergedData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #resolveConflict,
          [
            conflictId,
            resolution,
          ],
          {#mergedData: mergedData},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Box].
///
/// See the documentation for Mockito's code generation for more information.
class MockInspectionsBox extends _i1.Mock implements _i2.Box<_i6.Inspection> {
  MockInspectionsBox() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<_i6.Inspection> get values => (super.noSuchMethod(
        Invocation.getter(#values),
        returnValue: <_i6.Inspection>[],
      ) as Iterable<_i6.Inspection>);

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  bool get isOpen => (super.noSuchMethod(
        Invocation.getter(#isOpen),
        returnValue: false,
      ) as bool);

  @override
  bool get lazy => (super.noSuchMethod(
        Invocation.getter(#lazy),
        returnValue: false,
      ) as bool);

  @override
  Iterable<dynamic> get keys => (super.noSuchMethod(
        Invocation.getter(#keys),
        returnValue: <dynamic>[],
      ) as Iterable<dynamic>);

  @override
  int get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: 0,
      ) as int);

  @override
  bool get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: false,
      ) as bool);

  @override
  bool get isNotEmpty => (super.noSuchMethod(
        Invocation.getter(#isNotEmpty),
        returnValue: false,
      ) as bool);

  @override
  Iterable<_i6.Inspection> valuesBetween({
    dynamic startKey,
    dynamic endKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #valuesBetween,
          [],
          {
            #startKey: startKey,
            #endKey: endKey,
          },
        ),
        returnValue: <_i6.Inspection>[],
      ) as Iterable<_i6.Inspection>);

  @override
  _i6.Inspection? getAt(int? index) => (super.noSuchMethod(Invocation.method(
        #getAt,
        [index],
      )) as _i6.Inspection?);

  @override
  Map<dynamic, _i6.Inspection> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <dynamic, _i6.Inspection>{},
      ) as Map<dynamic, _i6.Inspection>);

  @override
  dynamic keyAt(int? index) => super.noSuchMethod(Invocation.method(
        #keyAt,
        [index],
      ));

  @override
  _i3.Stream<_i2.BoxEvent> watch({dynamic key}) => (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
          {#key: key},
        ),
        returnValue: _i3.Stream<_i2.BoxEvent>.empty(),
      ) as _i3.Stream<_i2.BoxEvent>);

  @override
  bool containsKey(dynamic key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<void> put(
    dynamic key,
    _i6.Inspection? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            key,
            value,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> putAt(
    int? index,
    _i6.Inspection? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAt,
          [
            index,
            value,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> putAll(Map<dynamic, _i6.Inspection>? entries) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAll,
          [entries],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<int> add(_i6.Inspection? value) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [value],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<Iterable<int>> addAll(Iterable<_i6.Inspection>? values) =>
      (super.noSuchMethod(
        Invocation.method(
          #addAll,
          [values],
        ),
        returnValue: _i3.Future<Iterable<int>>.value(<int>[]),
      ) as _i3.Future<Iterable<int>>);

  @override
  _i3.Future<void> delete(dynamic key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #deleteAt,
          [index],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteAll(Iterable<dynamic>? keys) => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [keys],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> compact() => (super.noSuchMethod(
        Invocation.method(
          #compact,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<int> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteFromDisk() => (super.noSuchMethod(
        Invocation.method(
          #deleteFromDisk,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> flush() => (super.noSuchMethod(
        Invocation.method(
          #flush,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
